cmake_minimum_required(VERSION 3.1)
project(DDP)

if(NOT CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

option(DDP_SYSTEM_EIGEN "Use system-installed version of Eigen" OFF)
option(DDP_BUILD_EXAMPLES "Build examples" ON)

set(EIGEN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/eigen)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(DDP_SYSTEM_EIGEN)
    find_package(Eigen)
    if(EIGEN_FOUND)
        message(STATUS "Eigen found: ${EIGEN_INCLUDE_DIR}")
    else()
        message(FATAL_ERROR "Eigen NOT found!")
    endif()
endif()

find_package(OpenMP)
if(OPENMP_FOUND)
    message(STATUS "OpenMP found")
    message(STATUS "OpenMP C Flags: ${OpenMP_C_FLAGS}")
    message(STATUS "OpenMP C++ Flags: ${OpenMP_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    add_definitions(-DDDP_USE_OPENMP)
endif()

find_package(MKL)
if(MKL_FOUND)
    message(STATUS "Intel MKL Found")
    message(STATUS "MKL root directory: ${MKL_ROOT_DIR}")
    message(STATUS "MKL include directory: ${MKL_INCLUDE_DIR}")
    message(STATUS "MKL libraries: ${MKL_LIBRARIES}")
    add_definitions(-DEIGEN_USE_MKL_ALL)
    include_directories(SYSTEM ${MKL_INCLUDE_DIR})
    link_libraries(${MKL_LIBRARIES})
endif()

include_directories(SYSTEM ${EIGEN_INCLUDE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)


add_library(ddp INTERFACE)
target_include_directories(ddp INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)
file(GLOB DDP_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/include/ddp/*.hpp")
target_sources(ddp INTERFACE ${DDP_SOURCES})

if(DDP_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()
